name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - closed
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Dependency Scan
        run: |
          mvn verify

      - name: Install Hadolint
        run: |
          wget -qO- https://github.com/hadolint/hadolint/releases/download/v2.11.0/hadolint-Linux-x86_64 | sudo tee /usr/local/bin/hadolint > /dev/null
          sudo chmod +x /usr/local/bin/hadolint

      - name: Lint Dockerfile
        run: |
          hadolint Dockerfile

      - name: Build Docker image
        run: |
          # Scan Docker image before building
          trivy image myapp:latest || exit 1
          
          # Build Docker image
          docker build -t myapp:${{ env.version }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag Docker image
        run: |
          docker tag myapp:${{ env.version }} ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.version }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.version }}

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Deploy script
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            # Pull the latest Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.version }}

            # Stop and remove the old container if it exists
            sudo docker stop myapp-container || true
            sudo docker rm myapp-container || true

            # Run the new Docker container
            sudo docker run -d -p 80:8000 --name myapp-container ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.version }}
          EOF
