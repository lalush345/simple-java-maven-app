name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - closed
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Maven 3.9.2
        run: |
          MAVEN_VERSION=3.9.2
          wget https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz
          tar -xvzf apache-maven-$MAVEN_VERSION-bin.tar.gz
          sudo mv apache-maven-$MAVEN_VERSION /opt/maven
          if [ -L /usr/bin/mvn ]; then sudo rm /usr/bin/mvn; fi
          sudo ln -s /opt/maven/bin/mvn /usr/bin/mvn
          mvn -v

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Dependency Scan
        run: |
          mvn verify

      - name: Bump patch version in pom.xml
        id: bump-version
        run: |
          echo "Bumping patch version..."
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH_PART=${VERSION_PARTS[2]}
          NEW_PATCH_PART=$((PATCH_PART + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_PART"
          echo "New version: $NEW_VERSION"
          mvn versions:set -DnewVersion=$NEW_VERSION
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push version change
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git commit -am "Bump version to ${{ env.version }}"
          git push

      - name: Build JAR file
        run: |
          mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          docker build -t myapp:${{ env.version }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag Docker image
        run: |
          docker tag myapp:${{ env.version }} ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.version }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.version }}

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Deploy script
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            # Pull the latest Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.version }}

            # Stop and remove the old container if it exists
            sudo docker stop myapp-container || true
            sudo docker rm myapp-container || true

            # Run the new Docker container
            sudo docker run -d -p 80:8000 --name myapp-container ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.version }}
          EOF
